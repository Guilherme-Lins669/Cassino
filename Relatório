Relat√≥rio de Desenvolvimento do Projeto

=-Dia 18/09/2025-=
In√≠cio do projeto. Havia d√∫vida entre desenvolver um projeto mais complexo utilizando Python Flask ou criar um jogo de azar pelo 
terminal do compilador. Ap√≥s an√°lise do desenvolvedor respons√°vel, foi decidido desenvolver o programa utilizando Python Flask, 
com o objetivo de criar um sistema mais completo.

=-Dia 19/09/2025-=
In√≠cio da programa√ß√£o do projeto. Foram encontrados diversos erros de sintaxe e problemas de conectividade. 
Com o tempo e a realiza√ß√£o de pesquisas apropriadas, a maioria dos erros foi solucionada.

=-Dia 21/09/2025-=
Primeira vers√£o do projeto conclu√≠da. O HTML, CSS e JavaScript foram implementados de forma b√°sica,
apenas para testar o funcionamento do sistema. Houve problemas iniciais com o banco de dados e o redirecionamento das p√°ginas.

=-Dia 22/09/2025-=
Corre√ß√µes realizadas no redirecionamento das p√°ginas. Banco de dados ajustado, possibilitando o armazenamento do hist√≥rico,
nome e saldo do usu√°rio. Iniciou-se a melhoria do layout visual do site.

=-Dia 24/09/2025-=
Site praticamente conclu√≠do (99%), restando apenas algumas altera√ß√µes b√°sicas e ajustes simples no design visual.

=-Dia 27/09/2025-=
Site conclu√≠do, sem necessidade de altera√ß√µes adicionais.

=-EXPLICANDO OS ARQUIVOS-=

=-BASE.HTML-=
funciona como o esqueleto principal da aplica√ß√£o web
Ele define a estrutura comum que ser√° usada por
todas as p√°ginas do site, garantindo que elementos como o
cabe√ßalho, links de CSS, scripts JavaScript e configura√ß√µes de responsividade sejam 
carregados automaticamente, sem a necessidade de repetir esse c√≥digo em cada p√°gina individual.

=-DEPOSIT.HTML-=
Este arquivo √© um template de p√°gina espec√≠fico da aplica√ß√£o, utilizado para
exibir a interface de dep√≥sito do jogador.
Ele herda a estrutura principal do base.html e preenche o bloco de conte√∫do definido ali, mantendo o layout e
os recursos padr√£o do site (como estilos e scripts)
Seu objetivo √© permitir que um jogador logado informe um valor em reais (R$) para depositar em sua conta virtual. 
A p√°gina exibe uma sauda√ß√£o com o nome do jogador e.
caso haja algum erro (como uma tentativa inv√°lida de dep√≥sito), tamb√©m mostra uma mensagem de erro.

=-GAME_DICE.HTML-=
O arquivo de Dados √© a interface frontend que permite ao usu√°rio interagir com a l√≥gica do jogo de dados.

Ele √© o respons√°vel por:

Exibir o saldo e as regras de pagamento.

Capturar a aposta e o palpite do jogador.

Comunicar esses dados ao backend (via main.js).

Exibir o resultado da jogada de forma din√¢mica.

=-GAME_MINESWEEPER.HTML-=
Este arquivo √© a p√°gina do jogo Campo Minado dentro do cassino. Ele mostra a tela onde o 
jogador faz uma aposta e come√ßa a jogar, clicando em c√©lulas de uma grade 5x5.
Al√©m disso, o arquivo j√° tem um pouco de JavaScript embutido, que cuida da parte interativa:

Envia a aposta para o servidor.

Monta o tabuleiro na tela.

Lida com os cliques do jogador.

Mostra se ele ganhou ou perdeu.

Atualiza o saldo automaticamente.

√â a interface completa do jogo Campo Minado, feita para funcionar direto no navegador, 
se comunicando com o servidor via requisi√ß√µes (fetch)

=-GAME_ROCKET.HTML-=
Este arquivo √© a p√°gina do jogo do Foguete no cassino.
Ele mostra uma interface onde o jogador pode:
Ver seu saldo atual Informar um valor de aposta.
Escolher se acha que o foguete vai subir ou descer.
Clicar em "Lan√ßar" para fazer a aposta.
Depois disso, o resultado do jogo aparece na tela (se o jogador ganhou ou perdeu).
Usa um multiplicador fixo de 0.25x (provavelmente para calcular ganhos).

Carrega o estilo do site (com style.css).

Carrega o JavaScript (main.js) que cuida da l√≥gica e intera√ß√µes.

√â uma tela simples, feita para o jogador apostar rapidamente e voltar para o lobby se quiser

=-GAME_ROULETTE.HTML-=
O arquivo game_roulette.html √© um template HTML √© a p√°gina que permite ao jogador apostar em uma cor 
e tentar a sorte girando a roleta. Ele combina visual, intera√ß√£o e comunica√ß√£o com o servidor para 
entregar uma experi√™ncia de jogo r√°pida e direta. Toda a l√≥gica de valida√ß√£o, sorteio da cor vencedora e 
atualiza√ß√£o de saldo √© feita no backend (Python/Flask) e retornada para essa p√°gina por meio do JavaScript.

=-GAME_SLOTS.HTML-=
 O arquivo game_slots.html √© o template da p√°gina do jogo de Ca√ßa-N√≠queis (ou Slots) do cassino virtual. Ele √© respons√°vel
por mostrar ao jogador a interface onde ele pode apostar,
girar os rolos e ver o resultado do jogo em tempo real.
O template √© escrito em HTML com o motor de templates Jinja2, que permite inserir dados din√¢micos vindos do backend Flask,
como o saldo do jogador.
O CSS √© carregado a partir do arquivo style.css para manter a apar√™ncia visual consistente com o restante do site.

A p√°gina tamb√©m cont√©m JavaScript integrado, que:

Captura o valor da aposta.

Envia a aposta para o servidor (backend) usando fetch() via POST na rota /play/caca_niqueis.

Recebe a resposta com o resultado (os n√∫meros sorteados e o saldo atualizado).

Atualiza dinamicamente a tela com os rolos e o saldo, sem precisar recarregar a p√°gina.

O design dos rolos √© definido com classes CSS (.reels e .reel) para dar o estilo de "m√°quina ca√ßa-n√≠queis"

=-HISTORY.HTML-=
O arquivo historico.html √© um template HTML que exibe o hist√≥rico de partidas do jogador no sistema de cassino online. 
Ele mostra de forma organizada todas as apostas feitas pelo usu√°rio, incluindo os jogos que ele jogou, os valores apostados, 
os ganhos ou perdas, e o saldo final ap√≥s cada jogada tambem Exibe o nome do jogador
O t√≠tulo da p√°gina mostra ‚ÄúHist√≥rico de [nome do jogador]‚Äù, deixando claro que os dados exibidos pertencem ao usu√°rio logado.

=-LOBBY.HTML-=
O lobby.html √© a tela principal do cassino, onde o jogador escolhe um jogo para jogar, 
v√™ seu saldo, acessa seu hist√≥rico e faz dep√≥sitos. √â uma interface organizada, 
interativa e eficiente para centralizar a navega√ß√£o dentro do sistema de minigames.
O jogador pode digitar o valor a ser depositado e enviar diretamente, sem sair da p√°gina.
Ao lado, o saldo do jogador aparece em reais, formatado com duas casas decimais.

Apresenta os links para todos os jogos dispon√≠veis

Cada jogo √© representado por um link com um √≠cone e o nome:

Foguete üöÄ

Campo Minado üí£

Ca√ßa N√≠queis üé∞

Roleta üé°

Dados üé≤

=-LOGIN.HTML-=
O arquivo login.html √© o template respons√°vel por exibir a tela de login do sistema de cassino. Ele serve como
ponto de entrada principal da aplica√ß√£o, permitindo que o usu√°rio se identifique antes de acessar os jogos.
Quando o usu√°rio insere um nome e clica em "Entrar", o servidor Python, que atende a rota /login, √© respons√°vel por:
Verificar o nome fornecido. Se o nome existir no banco de dados (cassino.db na tabela player), ele carrega a sess√£o do usu√°rio
Se o nome n√£o existir, ele cria um novo jogador no banco de dados.
Ap√≥s a autentica√ß√£o ou cria√ß√£o, o servidor geralmente redireciona o usu√°rio para o Lobby de Minigames

=-APP.PY-=
app.py, √© o n√∫cleo do backend da aplica√ß√£o de cassino desenvolvida com o framework Flask.
Ele √© respons√°vel por orquestrar toda a l√≥gica do sistema, √© o ponto central do sistema, unificando a l√≥gica de jogos, 
controle de usu√°rios, banco de dados e interface com o frontend.

Sem ele, o projeto n√£o conseguiria:

Iniciar sess√µes de usu√°rios.

Gerenciar apostas e calcular resultados.

Registrar partidas no hist√≥rico.

Proteger rotas privadas (como o lobby).

Sincronizar os dados entre servidor e interface.

=-EXTENSION.PY-=
Este arquivo define e exporta a inst√¢ncia principal do SQLAlchemy, 
a ferramenta usada para conectar o Flask com o banco de dados (neste caso, SQLite).
Ele inicializa o objeto db, que representa a conex√£o e os recursos do SQLAlchemy.
Esse objeto ser√° usado para Criar as tabelas (modelos).
Fazer queries no banco de dados.
Realizar inser√ß√µes, atualiza√ß√µes e exclus√µes.

=-MODELS.PY-=
Este arquivo define os modelos de dados do  cassino, ou seja.
as tabelas que ser√£o criadas no banco de dados cassino.db com ajuda do SQLAlchemy (ORM do Flask).
Esses modelos s√£o usados para criar o banco de dados (com db.create_all()).
Salvar dados persistentes das apostas consultar hist√≥rico, saldo, e estat√≠sticas do jogador.
Validar regras do jogo (pode apostar? saldo suficiente? etc

=-CSS-=
Este CSS cria uma interface moderna no estilo ‚Äúdark mode‚Äù, com foco em:
Legibilidade (textos claros em fundo escuro).
Visual elegante (cores douradas e cinzas).
Facilidade de navega√ß√£o (bot√µes grandes e responsivos).
Clareza em tabelas (bom para hist√≥rico de jogos).

