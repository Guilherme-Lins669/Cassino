Relat√≥rio de Desenvolvimento do Projeto

=-Dia 18/09/2025-=
In√≠cio do projeto. Havia d√∫vida entre desenvolver um projeto mais complexo utilizando Python Flask ou criar um jogo de azar pelo 
terminal do compilador. Ap√≥s an√°lise do desenvolvedor respons√°vel, foi decidido desenvolver o programa utilizando Python Flask, 
com o objetivo de criar um sistema mais completo.

=-Dia 19/09/2025-=
In√≠cio da programa√ß√£o do projeto. Foram encontrados diversos erros de sintaxe e problemas de conectividade. 
Com o tempo e a realiza√ß√£o de pesquisas apropriadas, a maioria dos erros foi solucionada.

=-Dia 21/09/2025-=
Primeira vers√£o do projeto conclu√≠da. O HTML, CSS e JavaScript foram implementados de forma b√°sica,
apenas para testar o funcionamento do sistema. Houve problemas iniciais com o banco de dados e o redirecionamento das p√°ginas.

=-Dia 22/09/2025-=
Corre√ß√µes realizadas no redirecionamento das p√°ginas. Banco de dados ajustado, possibilitando o armazenamento do hist√≥rico,
nome e saldo do usu√°rio. Iniciou-se a melhoria do layout visual do site.

=-Dia 24/09/2025-=
Site praticamente conclu√≠do (99%), restando apenas algumas altera√ß√µes b√°sicas e ajustes simples no design visual.

=-Dia 27/09/2025-=
Site conclu√≠do, sem necessidade de altera√ß√µes adicionais.

=-EXPLICANDO OS ARQUIVOS-=

=-BASE.HTML-=
funciona como o esqueleto principal da aplica√ß√£o web
Ele define a estrutura comum que ser√° usada por
todas as p√°ginas do site, garantindo que elementos como o
cabe√ßalho, links de CSS, scripts JavaScript e configura√ß√µes de responsividade sejam 
carregados automaticamente, sem a necessidade de repetir esse c√≥digo em cada p√°gina individual.

=-DEPOSIT.HTML-=
Este arquivo √© um template de p√°gina espec√≠fico da aplica√ß√£o, utilizado para
exibir a interface de dep√≥sito do jogador.
Ele herda a estrutura principal do base.html e preenche o bloco de conte√∫do definido ali, mantendo o layout e
os recursos padr√£o do site (como estilos e scripts)
Seu objetivo √© permitir que um jogador logado informe um valor em reais (R$) para depositar em sua conta virtual. 
A p√°gina exibe uma sauda√ß√£o com o nome do jogador e.
caso haja algum erro (como uma tentativa inv√°lida de dep√≥sito), tamb√©m mostra uma mensagem de erro.

=-GAME_DICE.HTML-=
O arquivo de Dados √© a interface frontend que permite ao usu√°rio interagir com a l√≥gica do jogo de dados.

Ele √© o respons√°vel por:

Exibir o saldo e as regras de pagamento.

Capturar a aposta e o palpite do jogador.

Comunicar esses dados ao backend (via main.js).

Exibir o resultado da jogada de forma din√¢mica.

=-GAME_MINESWEEPER.HTML-=
Este arquivo √© a p√°gina do jogo Campo Minado dentro do cassino. Ele mostra a tela onde o 
jogador faz uma aposta e come√ßa a jogar, clicando em c√©lulas de uma grade 5x5.
Al√©m disso, o arquivo j√° tem um pouco de JavaScript embutido, que cuida da parte interativa:

Envia a aposta para o servidor.

Monta o tabuleiro na tela.

Lida com os cliques do jogador.

Mostra se ele ganhou ou perdeu.

Atualiza o saldo automaticamente.

√â a interface completa do jogo Campo Minado, feita para funcionar direto no navegador, 
se comunicando com o servidor via requisi√ß√µes (fetch)

=-GAME_ROCKET.HTML-=
Este arquivo √© a p√°gina do jogo do Foguete no cassino.
Ele mostra uma interface onde o jogador pode:
Ver seu saldo atual Informar um valor de aposta.
Escolher se acha que o foguete vai subir ou descer.
Clicar em "Lan√ßar" para fazer a aposta.
Depois disso, o resultado do jogo aparece na tela (se o jogador ganhou ou perdeu).
Usa um multiplicador fixo de 0.25x (provavelmente para calcular ganhos).

Carrega o estilo do site (com style.css).

Carrega o JavaScript (main.js) que cuida da l√≥gica e intera√ß√µes.

√â uma tela simples, feita para o jogador apostar rapidamente e voltar para o lobby se quiser

=-GAME_ROULETTE.HTML-=
O arquivo game_roulette.html √© um template HTML √© a p√°gina que permite ao jogador apostar em uma cor 
e tentar a sorte girando a roleta. Ele combina visual, intera√ß√£o e comunica√ß√£o com o servidor para 
entregar uma experi√™ncia de jogo r√°pida e direta. Toda a l√≥gica de valida√ß√£o, sorteio da cor vencedora e 
atualiza√ß√£o de saldo √© feita no backend (Python/Flask) e retornada para essa p√°gina por meio do JavaScript.

=-GAME_SLOTS.HTML-=
 O arquivo game_slots.html √© o template da p√°gina do jogo de Ca√ßa-N√≠queis (ou Slots) do cassino virtual. Ele √© respons√°vel
por mostrar ao jogador a interface onde ele pode apostar,
girar os rolos e ver o resultado do jogo em tempo real.
O template √© escrito em HTML com o motor de templates Jinja2, que permite inserir dados din√¢micos vindos do backend Flask,
como o saldo do jogador.
O CSS √© carregado a partir do arquivo style.css para manter a apar√™ncia visual consistente com o restante do site.

A p√°gina tamb√©m cont√©m JavaScript integrado, que:

Captura o valor da aposta.

Envia a aposta para o servidor (backend) usando fetch() via POST na rota /play/caca_niqueis.

Recebe a resposta com o resultado (os n√∫meros sorteados e o saldo atualizado).

Atualiza dinamicamente a tela com os rolos e o saldo, sem precisar recarregar a p√°gina.

O design dos rolos √© definido com classes CSS (.reels e .reel) para dar o estilo de "m√°quina ca√ßa-n√≠queis"

=-HISTORY.HTML-=
O arquivo historico.html √© um template HTML que exibe o hist√≥rico de partidas do jogador no sistema de cassino online. 
Ele mostra de forma organizada todas as apostas feitas pelo usu√°rio, incluindo os jogos que ele jogou, os valores apostados, 
os ganhos ou perdas, e o saldo final ap√≥s cada jogada tambem Exibe o nome do jogador
O t√≠tulo da p√°gina mostra ‚ÄúHist√≥rico de [nome do jogador]‚Äù, deixando claro que os dados exibidos pertencem ao usu√°rio logado.

=-LOBBY.HTML-=
O lobby.html √© a tela principal do cassino, onde o jogador escolhe um jogo para jogar, 
v√™ seu saldo, acessa seu hist√≥rico e faz dep√≥sitos. √â uma interface organizada, 
interativa e eficiente para centralizar a navega√ß√£o dentro do sistema de minigames.
O jogador pode digitar o valor a ser depositado e enviar diretamente, sem sair da p√°gina.
Ao lado, o saldo do jogador aparece em reais, formatado com duas casas decimais.

Apresenta os links para todos os jogos dispon√≠veis

Cada jogo √© representado por um link com um √≠cone e o nome:

Foguete üöÄ

Campo Minado üí£

Ca√ßa N√≠queis üé∞

Roleta üé°

Dados üé≤

=-LOGIN.HTML-=
O arquivo login.html √© o template respons√°vel por exibir a tela de login do sistema de cassino. Ele serve como
ponto de entrada principal da aplica√ß√£o, permitindo que o usu√°rio se identifique antes de acessar os jogos.
Quando o usu√°rio insere um nome e clica em "Entrar", o servidor Python, que atende a rota /login, √© respons√°vel por:
Verificar o nome fornecido. Se o nome existir no banco de dados (cassino.db na tabela player), ele carrega a sess√£o do usu√°rio
Se o nome n√£o existir, ele cria um novo jogador no banco de dados.
Ap√≥s a autentica√ß√£o ou cria√ß√£o, o servidor geralmente redireciona o usu√°rio para o Lobby de Minigames

=-APP.PY-=
app.py, √© o n√∫cleo do backend da aplica√ß√£o de cassino desenvolvida com o framework Flask.
Ele √© respons√°vel por orquestrar toda a l√≥gica do sistema, √© o ponto central do sistema, unificando a l√≥gica de jogos, 
controle de usu√°rios, banco de dados e interface com o frontend.

Sem ele, o projeto n√£o conseguiria:

Iniciar sess√µes de usu√°rios.

Gerenciar apostas e calcular resultados.

Registrar partidas no hist√≥rico.

Proteger rotas privadas (como o lobby).

Sincronizar os dados entre servidor e interface.

=-EXTENSION.PY-=
Este arquivo define e exporta a inst√¢ncia principal do SQLAlchemy, 
a ferramenta usada para conectar o Flask com o banco de dados (neste caso, SQLite).
Ele inicializa o objeto db, que representa a conex√£o e os recursos do SQLAlchemy.
Esse objeto ser√° usado para Criar as tabelas (modelos).
Fazer queries no banco de dados.
Realizar inser√ß√µes, atualiza√ß√µes e exclus√µes.

=-MODELS.PY-=
Este arquivo define os modelos de dados do  cassino, ou seja.
as tabelas que ser√£o criadas no banco de dados cassino.db com ajuda do SQLAlchemy (ORM do Flask).
Esses modelos s√£o usados para criar o banco de dados (com db.create_all()).
Salvar dados persistentes das apostas consultar hist√≥rico, saldo, e estat√≠sticas do jogador.
Validar regras do jogo (pode apostar? saldo suficiente? etc

=-STYLE.CSS-=
Este CSS cria uma interface moderna no estilo ‚Äúdark mode‚Äù, com foco em:
Legibilidade (textos claros em fundo escuro).
Visual DE (cores douradas e cinzas).
FaciliTANDO de navega√ß√£o (bot√µes grandes e responsivos).
Clareza em tabelas (bom para hist√≥rico de jogos).

=-MAIN.JS-=
Este arquivo, main.js, √© o c√©rebro da interatividade (frontend) do seu c√≥digo de cassino.
Ele √© o respons√°vel por fazer a aplica√ß√£o parecer um site moderno e fluido, utilizando AJAX (Asynchronous JavaScript and XML) para 
se comunicar com o servidor Python (app.py) sem que a p√°gina precise recarregar.
Deixa a interface din√¢mica e moderna
Substitui recarregamentos de p√°gina por requisi√ß√µes AJAX
Garante interatividade sem travamentos
Cuida de fluxos cr√≠ticos como: jogar, depositar, atualizar saldo e navegar pelo lobby

=-EXPLICANDO O CODIGO DO ARQUIVO-=

---
## BASE.HTML

## CODIGO HTML

*<!doctype html>	Estrutura	Define o tipo de documento como HTML5.

<html lang="pt-br">	O elemento raiz de todo o documento, definindo o idioma como Portugu√™s Brasileiro.

<head>		Cont√©m informa√ß√µes sobre o documento que n√£o s√£o exibidas na p√°gina (como t√≠tulo, codifica√ß√£o e links para CSS).

<meta charset="utf-8">		Define a codifica√ß√£o de caracteres para suportar a maioria dos idiomas.

<meta name="viewport" ...>	Metadados	Configura a forma como a p√°gina deve ser exibida em diferentes dispositivos (essencial para responsividade).
<title>CASSINO</title>		Define o texto que aparece na aba do navegador.

<link rel="stylesheet" ...>	Linka o arquivo de estilo CSS (style.css) ao documento.

<body>		Cont√©m o conte√∫do vis√≠vel da p√°gina.

<div>		Um cont√™iner gen√©rico (id="app") usado para agrupar outros elementos HTML.

<script>	Conte√∫do	Usado para incorporar ou referenciar c√≥digo JavaScript.

## DEPOSIT.HTML


{% extends 'base.html' %}
Indica que esta p√°gina herda o layout principal definido em base.html.

{% block content %}
In√≠cio do bloco onde ser√° colocado o conte√∫do espec√≠fico desta p√°gina.

<main class="center">  
Define a √°rea principal da p√°gina e aplica a classe "center" para centralizar o conte√∫do.  

<h2>Bem-vindo, {{ player.name }}</h2>  
Exibe uma sauda√ß√£o personalizada com o nome do jogador logado.  

{% if error %}
Verifica se existe alguma mensagem de erro a ser exibida.

<p class="error">{{ error }}</p>  
Mostra a mensagem de erro (se existir), estilizada com a classe "error".  

{% endif %}
Fecha a estrutura condicional de exibi√ß√£o do erro.

<form method="post" action="{{ url_for('deposit') }}">  
Cria um formul√°rio que envia dados via POST para a rota "deposit".  

<label>Quanto deseja depositar (R$)?</label>
Exibe um texto informando o que o usu√°rio deve preencher.

<input name="amount" type="number" step="0.01" min="0.01" required>  
Campo para digitar o valor do dep√≥sito; s√≥ aceita n√∫meros positivos com duas casas decimais.  

<button type="submit">Depositar</button>
Bot√£o que envia o formul√°rio.

</form> Marca o fim do formul√°rio.  
<a href="{{ url_for('index') }}">Cria um link que redireciona o usu√°rio para a p√°gina inicial.  
<button type="button" class="btn btn-primary">‚¨Ö Voltar</button>
Bot√£o estilizado que permite voltar para a p√°gina inicial
</a> Fecha o link da navega√ß√£o.  
</main> Fecha a se√ß√£o principal da p√°gina.  

{% endblock %}
Finaliza o bloco de conte√∫do iniciado anteriormente.

### GAME_DICE.HTML

<!DOCTYPE html>	Defini√ß√£o de Tipo	Define o documento como um HTML5.
<html lang="pt-br">		O cont√™iner principal do documento, definindo a linguagem como Portugu√™s do Brasil.
<head>	Cont√©m informa√ß√µes sobre o documento que n√£o s√£o exibidas na p√°gina.
<meta charset="UTF-8">		Garante que acentos e caracteres especiais sejam exibidos corretamente.
<title>	T√≠tulo da P√°gina	Define o t√≠tulo que aparece na aba ou janela do navegador.
<link>	Estilo (CSS)	Liga o arquivo de estilo externo (style.css) para definir a apar√™ncia visual da p√°gina.
<script defer>	Liga o arquivo JavaScript principal (main.js). O atributo defer garante que o script seja executado ap√≥s todo o HTML ser carregado, sendo essencial para a l√≥gica de AJAX.

<body>	Conte√∫do Vis√≠vel	Cont√©m todo o conte√∫do que o usu√°rio v√™.
<div class="container">	Layout	Um cont√™iner de prop√≥sito geral, usado para aplicar estilos de layout (como centraliza√ß√£o ou largura m√°xima) definidos no style.css.
<h1>	T√≠tulo Principal	Exibe o t√≠tulo "üé≤ Dados".
<p>	Par√°grafo	Usado para exibir as regras (Multiplicador) e informa√ß√µes de conta (Saldo).
<span id="saldo">	Saldo Din√¢mico	Um cont√™iner inline. O id="saldo" √© crucial, pois o JavaScript (main.js) usa esse ID para atualizar o saldo em tempo real ap√≥s cada aposta. O c√≥digo `{{ '%.2

form id="dados-form">	Formul√°rio de Aposta	Agrupa os campos de aposta. O id="dados-form" √© o alvo do JavaScript para interceptar a submiss√£o e enviar a jogada por AJAX √† rota /play/dados.
<input type="number" name="bet" ...>	Valor da Aposta	Campo para o usu√°rio digitar o valor em dinheiro. O name="bet" √© o nome da vari√°vel enviada ao servidor.
<label for="guess">	R√≥tulo	Define o texto descritivo para o campo de palpite, associado ao input com id="guess".
<input id="guess" type="number" name="guess" ...>	Palpite da Soma	Campo para o usu√°rio adivinhar a soma dos dados. Os atributos min="5" e max="30" restringem o valor aos limites l√≥gicos do jogo.
<button type="submit">	Bot√£o de A√ß√£o	Inicia a submiss√£o do formul√°rio, que √© ent√£o processada pelo JavaScript.

<div id="resultado">	Mensagens do Jogo	Uma √°rea vazia onde o JavaScript ir√° injetar dinamicamente o resultado da jogada (os n√∫meros sorteados, se ganhou ou perdeu, e o pr√™mio).
<a>	Hyperlink	Permite ao usu√°rio retornar ao Lobby do cassino. O {{ url_for('lobby') }} √© uma fun√ß√£o do Jinja2 que gera o link correto para a rota de lobby do Flask.

 ### GAME_MINESWEEPER.HTML

<style>	Estilo do Jogo	Define o visual espec√≠fico do Campo Minado. O .grid usa display: grid e grid-template-columns: repeat(5, 50px) para criar um tabuleiro perfeito de 5√ó5. O .cell define o tamanho e a apar√™ncia dos quadrados, e as classes .revealed e .bomb controlam as cores e cursores ap√≥s o clique.
<div class="container">	Layout	Cont√™iner principal para centralizar o conte√∫do e aplicar o estilo geral do site.
<p> Saldo: R$ <span id="saldo">...</span> </p>	Saldo Din√¢mico	Exibe o saldo. O id="saldo" √© usado pelo JavaScript para atualizar o valor ap√≥s cada clique seguro ou a perda do jogo.

<form id="start-form">	In√≠cio da Aposta	Este formul√°rio n√£o usa o main.js gen√©rico, mas sim o script dedicado abaixo. Ele √© usado apenas para coletar a aposta inicial.
<input name="bet" ...>	Valor da Aposta	Campo onde o jogador insere o valor a ser apostado para esta rodada de Campo Minado.
<button type="submit">	Inicia Jogo	Aciona o evento que chama a rota /minesweeper/start no backend via AJAX.
<div id="game">	Tabuleito	√â o cont√™iner vazio onde o JavaScript desenha o tabuleiro 5√ó5 quando o jogo √© iniciado.
<div id="resultado">	Mensagens	√Årea para exibir mensagens de status (erros de aposta, "Jogo iniciado", "C√©lula segura!" ou "Voc√™ perdeu!").

### GAME_ROCKET.HTML

<h1>Foguete</h1>	T√≠tulo Principal	O nome do jogo exibido ao usu√°rio.
<p>Multiplicador: 0.25x</p>	Regra do Jogo	Informa ao jogador que, se ele acertar, o ganho ser√° de 0.25 vezes o valor apostado. Este √© um multiplicador baixo, t√≠pico de jogos com alta chance de acerto (50% no caso up/down).
<span id="saldo">...</span>	Saldo Din√¢mico	Exibe o saldo do jogador. O id="saldo" √© o alvo do JavaScript para atualiza√ß√£o em tempo real ap√≥s cada aposta.

<form id="foguete-form">	Cont√™iner da Aposta	Agrupa os campos de submiss√£o. O id="foguete-form" √© crucial, pois o main.js o usa para identificar o jogo (foguete) e iniciar a chamada AJAX para a rota /play/foguete.
<input type="number" name="bet" ...>	Valor da Aposta	Campo para o usu√°rio digitar quanto deseja apostar. O name="bet" √© o nome da vari√°vel enviada ao servidor.
<select name="predict" id="predict">	Escolha do Palpite	Permite ao usu√°rio selecionar sua previs√£o (o palpite). O name="predict" envia a escolha (up ou down) para o servidor.
<option value="up/down">	Op√ß√µes	As duas √∫nicas escolhas poss√≠veis para o jogador, representando a aposta de 50/50.
<button type="submit">Lan√ßar</button>	A√ß√£o	Bot√£o que envia o formul√°rio e aciona a l√≥gica da rodada no main.js.

<div id="resultado">	Mensagens do Jogo	√Årea vazia onde o JavaScript injetar√° a mensagem final da rodada (ex: "Voc√™ ganhou!", o valor do payout e se o foguete subiu ou desceu).
<a>	Hyperlink	Link para o Lobby, permitindo ao jogador retornar √† p√°gina de sele√ß√£o de jogos.

###  GAME_ROULETTE.HTML

<title>Roleta</title>	T√≠tulo	Define o t√≠tulo que aparece na aba do navegador.
<link rel="stylesheet" ...>	Estilo (CSS)	Liga o arquivo style.css para aplicar o estilo visual do site.
<script src="..." defer></script>	Comportamento (JS)	Inclui o main.js. Isso permite que a submiss√£o do formul√°rio seja interceptada e enviada ao servidor de forma ass√≠ncrona (AJAX).
<div class="container">	Layout	Cont√™iner principal para o conte√∫do da p√°gina.

<h1>Roleta</h1>	T√≠tulo Principal	O nome do jogo.
<p>Multiplicador: 3x (chance fixa de 15%)</p>	Regra do Jogo	Informa que, ao acertar a cor, o jogador ganha 3 vezes a aposta, mas a chance de acerto √© fixa em 15% (conforme definido no app.py), independente da cor escolhida.
<span id="saldo">...</span>	Saldo Din√¢mico	O id="saldo" √© o ponto onde o JavaScript (main.js) atualiza o saldo do jogador na tela ap√≥s o resultado da rodada.

<form id="roleta-form">	Cont√™iner da Aposta	Agrupa os campos de submiss√£o. O id="roleta-form" √© essencial, pois o main.js o identifica para chamar a rota /play/roleta no servidor.
<input type="number" name="bet" ...>	Valor da Aposta	O campo onde o usu√°rio insere a aposta. O name="bet" √© o nome da vari√°vel que o servidor espera para saber o valor da aposta.
<select name="pick" required>	Escolha da Cor	Permite ao usu√°rio selecionar uma das op√ß√µes de aposta. O name="pick" √© o nome da vari√°vel enviada ao servidor, que cont√©m o palpite do jogador (azul, vermelho ou preto).
<option value="cor">	Op√ß√µes de Aposta	As cores dispon√≠veis para apostar.
<button type="submit">Rodar</button>	A√ß√£o	Aciona a submiss√£o do formul√°rio e o in√≠cio da rodada no backend, gerenciado pelo main.js.

<div id="resultado">	Mensagens do Jogo	A √°rea onde o JavaScript injetar√° dinamicamente o resultado da rodada (ex: "Voc√™ perdeu", "Voc√™ ganhou na cor azul!", pr√™mio e novo saldo).
<a>	Hyperlink	Link para voltar ao Lobby.




###  `GAME_SLOTS.HTML` (Ca√ßa-N√≠queis)

#### CODIGO HTML

<!DOCTYPE html> ‚Äì Define o tipo do documento (HTML5).
<html lang="pt-br"> ‚Äì Define idioma da p√°gina.
<head> ‚Äì Cont√©m metadados e links (CSS/JS).
<meta charset="UTF-8"> ‚Äì Codifica√ß√£o de caracteres.
<title> ‚Äì T√≠tulo da aba do navegador.
<link rel="stylesheet"> ‚Äì Importa o CSS.
<style> ‚Äì Estilo espec√≠fico da p√°gina.
<script src="..." defer> ‚Äì Importa JS sem travar a renderiza√ß√£o.
<body> ‚Äì Conte√∫do vis√≠vel da p√°gina.
<div class="container">` ‚Äì Caixa central de layout.
<h1> ‚Äì T√≠tulo principal.
<p> ‚Äì Texto explicativo.
<form> ‚Äì Formul√°rio de aposta.
<input> ‚Äì Campo de valor da aposta.
<button> ‚Äì Bot√£o de a√ß√£o (Girar).
<div id="reels"> ‚Äì √Årea dos rolos (s√≠mbolos).
<div id="resultado"> ‚Äì Mostra o resultado da jogada.
<a href="{{ url_for('lobby') }}"> ‚Äì Link para voltar ao Lobby.


###  `HISTORY.HTML` (Hist√≥rico de Partidas)

####  CODIGO HTML

<table> ‚Äì Tabela para listar hist√≥rico.
<tr> ‚Äì Linha da tabela.
<th> ‚Äì Cabe√ßalho da tabela (Jogo, Aposta, etc.).
<td> ‚Äì Dados de cada partida (dentro do loop `{% for partida in partidas %}`).

---

###  `LOBBY.HTML` (Lobby Principal)

* `{% extends 'base.html' %}` ‚Äì Herda o layout base.
* `{% block content %}` ‚Äì In√≠cio da √°rea de conte√∫do principal.

<div class="topbar"> ‚Äì Barra superior com nome do usu√°rio e saldo.
<div class="user-dropdown"> ‚Äì Dropdown com bot√£o de dep√≥sito e logout.
<nav> ‚Äì Menu de navega√ß√£o para jogos.
<a href="{{ url_for(...) }}"> ‚Äì Links din√¢micos com Flask.
<div id="depositModal"> ‚Äì Janela modal para dep√≥sito.
<form id="deposit-form"> ‚Äì Formul√°rio de envio de dep√≥sito.
<input type="number"> ‚Äì Campo de valor.
<button> ‚Äì Bot√£o "Depositar".

---

### `LOGIN.HTML` (Tela de Login)
## CODIGO HTML

<form method="POST" action="/login"> ‚Äì Formul√°rio que envia nome via POST.
<input type="text" name="name"> ‚Äì Campo de entrada do nome.
<button>` ‚Äì Bot√£o de envio ("Entrar").

---

### `STATIC/CSS/STYLE.CSS` (Estilo Visual)

#### Seletores e estilos:

* `body` ‚Äì Fundo escuro, texto claro, centraliza√ß√£o.
* `.container` ‚Äì Caixa com sombra, margem e bordas arredondadas.
* `input, button` ‚Äì Padding, cor, borda, radius.
* `button:hover` ‚Äì Efeito hover (destaque amarelo).
* `table, th, td` ‚Äì Layout e bordas das tabelas.
* `nav a, a` ‚Äì Links estilizados (cor, fundo, hover).

---

###`STATIC/JS/MAIN.JS` (JavaScript do Frontend)

#### Fun√ß√µes:

* Captura de formul√°rios de jogos (`form[id$='-form']`).
* Envio de apostas via `fetch()` para `/play/<game>`.
* Atualiza saldo e resultado dinamicamente.
* Controla:
  ¬† - Dropdown do usu√°rio (abrir/fechar).
  ¬† - Modal de dep√≥sito (abrir/fechar).
  ¬† - Envio do formul√°rio de dep√≥sito via AJAX.
* Atualiza `<span id="saldo">` na tela.
* Atualiza `<div id="resultado">` com mensagem da rodada.

---

 ##'APP.PY` (Principal ‚Äì Backend do Cassino)

## Fun√ß√µes principais:

* `@app.route(...)` ‚Äì Define as rotas do servidor.
* `request.form`, `request.get_json()` ‚Äì Captura dados do frontend.
* `session` ‚Äì Gerencia a sess√£o do jogador (login, saldo).
* `render_template()` ‚Äì Renderiza templates HTML.
* `redirect(url_for(...))` ‚Äì Redirecionamento de p√°gina.
* `jsonify(...)` ‚Äì Resposta em JSON para o frontend (AJAX).
* L√≥gica completa dos jogos:
  ¬† - Campo Minado
  ¬† - Ca√ßa N√≠queis
  ¬† - Dados
  ¬† - Roleta
  ¬† - Foguete
* Rota de hist√≥rico, dep√≥sito, logout etc.

---

`MODELS.PY` (Banco de Dados ‚Äì ORM com SQLAlchemy)

####  Classes:

* **Player** (Usu√°rio):
  ¬† - `id`, `name`, `balance`, `initial_deposit`, `created_at`
  ¬† - Relacionamento com `Match` (partidas).
* **Match** (Hist√≥rico de partidas):
  ¬† - `id`, `player_id`, `game`, `bet`, `payout`, `balance_after`, `played_at`

---

 `EXTENSIONS.PY` (Integra√ß√£o com Banco de Dados)

C√≥digo:

```python
from flask_sqlalchemy import SQLAlchemy
db = SQLAlchemy()
```

* Cria a inst√¢ncia do SQLAlchemy (`db`).
* Usado por `app.py` e `models.py` para acessar o banco de dados (`cassino.db`).

---


